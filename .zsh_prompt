autoload -U colors && colors

# Constants
bold=$fg_bold[white]
reset=$reset_color
black=$fg[black]
blue="%F{#85C1E9}"
cyan="%F{#48C9B0}"
green=$fg[green]
orange="%F{#FF7F50}"
pink="%F{#DE3163}"
red=$fg[red]
violet="%F{#8E44AD}"
white=$fg[white]
yellow="%F{#FFBF00}"

#
#

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi

#
#

prompt_azure_subscription() {
  subscription=$(az account show --query 'name' -o tsv 2>/dev/null)
  if [[ ! -z "$subscription" ]]; then
    echo "${1}$subscription${reset} ";
  fi
}

prompt_git() {

  local s='';
  local branchName='';
  
  if [[ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]]; then # Check if the current directory is in a Git repository.
    if [[ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]]; then # check if the current directory is in .git before running git checks
      
      git update-index --really-refresh -q &>/dev/null; # Ensure the index is up to date.
      if ! git diff --quiet --ignore-submodules --cached; then s+='+'; fi; # Check for uncommitted changes in the index.
      if ! git diff-files --quiet --ignore-submodules --; then s+='!'; fi; # Check for unstaged changes.
      if [[ -n "$(git ls-files --others --exclude-standard)" ]]; then s+='?'; fi; # Check for untracked files.
      if git rev-parse --verify refs/stash &>/dev/null; then s+='$'; fi; # Check for stashed files.
      
    fi;
    
    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')${rest_color}";
    
    [[ -n "${s}" ]] && s=" [${s}]";
    
    echo "${1}${branchName}${blue}${s}${reset}";
  else
    return;
  fi;
}

prompt_k8s() {

  ctx=$(k config current-context 2>/dev/null)
  if [[ ! -z "$ctx" ]]; then
    echo "${1}$ctx/$(k config view --minify --output jsonpath={..namespace})${reset}";
  fi
}

#
#

if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${orange}";
fi;

if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="${yellow}";
fi;

setopt PROMPT_SUBST  # enable command substitution in the prompt

PS1="%{$userStyle%}%n%{$reset%} on %{$yellow%}%m%{$reset%} in %{$fg[green]%}%~%{$reset%}"
PS1+='$(prompt_git " ${violet}")$(prompt_k8s " k8s:${pink}")$(prompt_azure_subscription " az:${cyan}")'
PS1+=$'\n'
PS1+="%{$white%}λ %{$reset%}"
export PS1

PS2="%{$yellow%}→ %{$reset%}"
export PS2
